{"ast":null,"code":"var _jsxFileName = \"/Users/niteshsingh/Desktop/Voimo/frontend/src/contexts/user.context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\"; // Creating a Realm App Instance\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new App(APP_ID); // Creating a user context to manage and access all the user related functions\n// across different component and pages.\n\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(null); // Function to login user into our Realm using their email & password\n\n  const emailPasswordLogin = async (email, password) => {\n    const credentials = Credentials.emailPassword(email, password);\n    const authedUser = await app.logIn(credentials);\n    setUser(authedUser);\n    return authedUser;\n  }; // Function to signup user into our Realm using their email & password\n\n\n  const emailPasswordSignup = async (email, password) => {\n    try {\n      await app.emailPasswordAuth.registerUser(email, password); // Since we are automatically confirming our users we are going to login\n      // the user using the same credentials once the signup is complete.\n\n      return emailPasswordLogin(email, password);\n    } catch (error) {\n      throw error;\n    }\n  }; // Function to fetch-user(if the user is already logged in) from local storage\n\n\n  const fetchUser = async () => {\n    if (!app.currentUser) return false;\n\n    try {\n      await app.currentUser.refreshCustomData(); // Now if we have a user we are setting it to our user context\n      // so that we can use it in our app across different components.\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (error) {\n      throw error;\n    }\n  }; // Function to logout user from our Realm\n\n\n  const logOutUser = async () => {\n    if (!app.currentUser) return false;\n\n    try {\n      await app.currentUser.logOut(); // Setting the user to null once loggedOut.\n\n      setUser(null);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      fetchUser,\n      emailPasswordLogin,\n      emailPasswordSignup,\n      logOutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n\n_s(UserProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/niteshsingh/Desktop/Voimo/frontend/src/contexts/user.context.js"],"names":["createContext","useState","App","Credentials","APP_ID","app","UserContext","UserProvider","children","user","setUser","emailPasswordLogin","email","password","credentials","emailPassword","authedUser","logIn","emailPasswordSignup","emailPasswordAuth","registerUser","error","fetchUser","currentUser","refreshCustomData","logOutUser","logOut"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,WAAjC;AACA,SAASC,MAAT,QAAuB,oBAAvB,C,CAEA;;;AACA,MAAMC,GAAG,GAAG,IAAIH,GAAJ,CAAQE,MAAR,CAAZ,C,CAEA;AACA;;AACA,OAAO,MAAME,WAAW,gBAAGN,aAAa,EAAjC;AAGP,OAAO,MAAMO,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC,CAD4C,CAG5C;;AACA,QAAMU,kBAAkB,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACpD,UAAMC,WAAW,GAAGX,WAAW,CAACY,aAAZ,CAA0BH,KAA1B,EAAiCC,QAAjC,CAApB;AACA,UAAMG,UAAU,GAAG,MAAMX,GAAG,CAACY,KAAJ,CAAUH,WAAV,CAAzB;AACAJ,IAAAA,OAAO,CAACM,UAAD,CAAP;AACA,WAAOA,UAAP;AACD,GALD,CAJ4C,CAW5C;;;AACA,QAAME,mBAAmB,GAAG,OAAON,KAAP,EAAcC,QAAd,KAA2B;AACrD,QAAI;AACF,YAAMR,GAAG,CAACc,iBAAJ,CAAsBC,YAAtB,CAAmCR,KAAnC,EAA0CC,QAA1C,CAAN,CADE,CAEF;AACA;;AACA,aAAOF,kBAAkB,CAACC,KAAD,EAAQC,QAAR,CAAzB;AACD,KALD,CAKE,OAAOQ,KAAP,EAAc;AACd,YAAMA,KAAN;AACD;AACF,GATD,CAZ4C,CAuB5C;;;AACA,QAAMC,SAAS,GAAG,YAAY;AAC5B,QAAI,CAACjB,GAAG,CAACkB,WAAT,EAAsB,OAAO,KAAP;;AACtB,QAAI;AACF,YAAMlB,GAAG,CAACkB,WAAJ,CAAgBC,iBAAhB,EAAN,CADE,CAEF;AACA;;AACAd,MAAAA,OAAO,CAACL,GAAG,CAACkB,WAAL,CAAP;AACA,aAAOlB,GAAG,CAACkB,WAAX;AACD,KAND,CAME,OAAOF,KAAP,EAAc;AACd,YAAMA,KAAN;AACD;AACF,GAXD,CAxB4C,CAqC5C;;;AACA,QAAMI,UAAU,GAAG,YAAY;AAC7B,QAAI,CAACpB,GAAG,CAACkB,WAAT,EAAsB,OAAO,KAAP;;AACtB,QAAI;AACF,YAAMlB,GAAG,CAACkB,WAAJ,CAAgBG,MAAhB,EAAN,CADE,CAEF;;AACAhB,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,aAAO,IAAP;AACD,KALD,CAKE,OAAOW,KAAP,EAAc;AACd,YAAMA,KAAN;AACD;AACF,GAVD;;AAaA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEZ,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBY,MAAAA,SAAjB;AAA4BX,MAAAA,kBAA5B;AAAgDO,MAAAA,mBAAhD;AAAqEO,MAAAA;AAArE,KAA7B;AAAA,cACJjB;AADI;AAAA;AAAA;AAAA;AAAA,UAAP;AAGD,CAtDM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState } from \"react\";\nimport { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\";\n\n// Creating a Realm App Instance\nconst app = new App(APP_ID);\n\n// Creating a user context to manage and access all the user related functions\n// across different component and pages.\nexport const UserContext = createContext();\n\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  // Function to login user into our Realm using their email & password\n  const emailPasswordLogin = async (email, password) => {\n    const credentials = Credentials.emailPassword(email, password);\n    const authedUser = await app.logIn(credentials);\n    setUser(authedUser);\n    return authedUser;\n  };\n\n  // Function to signup user into our Realm using their email & password\n  const emailPasswordSignup = async (email, password) => {\n    try {\n      await app.emailPasswordAuth.registerUser(email, password);\n      // Since we are automatically confirming our users we are going to login\n      // the user using the same credentials once the signup is complete.\n      return emailPasswordLogin(email, password);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to fetch-user(if the user is already logged in) from local storage\n  const fetchUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.refreshCustomData();\n      // Now if we have a user we are setting it to our user context\n      // so that we can use it in our app across different components.\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Function to logout user from our Realm\n  const logOutUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.logOut();\n      // Setting the user to null once loggedOut.\n      setUser(null);\n      return true;\n    } catch (error) {\n      throw error\n    }\n  }\n  \n\n  return <UserContext.Provider value={{ user, setUser, fetchUser, emailPasswordLogin, emailPasswordSignup, logOutUser }}>\n    {children}\n  </UserContext.Provider>;\n}"]},"metadata":{},"sourceType":"module"}